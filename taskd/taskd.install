export TASKDDATA="/var/lib/taskd"

TASKMSG="Taskd has been configured to use \"$TASKDDATA\" as its data directory

Configuration howto: http://taskwarrior.org/docs/server_setup.html

The scripts to create the PKI are at \"/usr/share/taskd/pki/\"

You now have to set the auth and the server in /var/lib/taskd/config:

  $ su taskd -c 'taskd config --data \"$TASKDDATA\" --force server localhost:53333'
  $ su taskd -c 'taskd add --data \"$TASKDDATA\" org MyOrgName'
  $ su taskd -c 'taskd add --data \"$TASKDDATA\" user MyOrgName MyUserName'
"

post_upgrade() {
    # Reload the systemd daemon so it sees the new service scripts
    systemctl --system daemon-reload

    # Create the user/group if they don't exist, then lock the user's password
    [[ ! $(getent group taskd) ]] \
        && groupadd taskd \
        && echo "Group 'taskd' added"
    [[ ! $(getent passwd taskd) ]] \
        && useradd -c 'Taskwarrior Task Server User' -g taskd -d "$TASKDDATA" -s /usr/bin/bash taskd \
        && passwd -l taskd > /dev/null 2>&1 \
        && echo "User 'taskd' added"

    # Configure tmpfiles.d
    systemd-tmpfiles --create taskd.conf
}

post_install() {
    post_upgrade

    cd $TASKDDATA

    if [ -e ca.cert.pem -o -e ca.key.pem -o -e client.cert.pem -o -e client.key.pem -o -e server.cert.pem -o -e server.key.pem -o -e server.key.pem ] ; then
        echo "${TASKDDATA} already configured"
    else
        echo
        taskd init
        /usr/share/taskd/pki/generate > /dev/null 2>&1
        taskd config --quiet --force client.cert "$TASKDDATA/client.cert.pem"
        taskd config --quiet --force client.key "$TASKDDATA/client.key.pem"
        taskd config --quiet --force server.cert "$TASKDDATA/server.cert.pem"
        taskd config --quiet --force server.key "$TASKDDATA/server.key.pem"
        taskd config --quiet --force server.crl "$TASKDDATA/server.crl.pem"
        taskd config --quiet --force ca.cert "$TASKDDATA/ca.cert.pem"
        taskd config --quiet --force log "$TASKDDATA/taskd.log"
        taskd config --quiet --force pid.file "$TASKDDATA/taskd.pid"
        taskd config --quiet --force client.allow '^task [2-9]'
        chown --recursive taskd.taskd "$TASKDDATA"
    fi

    cat <<< "$TASKMSG"
}

post_remove() {
    # Delete the taskd username and group if they exist
    [[ $(getent passwd taskd) ]] && userdel taskd
    [[ $(getent group taskd) ]] && groupdel taskd
    echo "The 'taskd' user and group have been removed"
    echo "The \"${TASKDDATA}\" directory must be removed manually"
}
